import DequeModule

final class MaximumNumberofTasksYouCanAssign {
    func maxTaskAssign(_ tasks: [Int], _ workers: [Int], _ pills: Int, _ strength: Int) -> Int {
        let n = tasks.count, m = workers.count, tasks = tasks.sorted(), workers = workers.sorted()
        var l = 1, r = min(m, n), ans = 0
        while l <= r {
            let mid = (l + r) / 2
            if check(tasks, workers, pills, strength, mid) {
                ans = mid
                l = mid + 1
            } else {
                r = mid - 1
            }
        }
        return ans
    }
    
    private func check(_ tasks: [Int], _ workers: [Int], _ pills: Int, _ strength: Int, _ mid: Int) -> Bool {
        let m = workers.count
        var p = pills, ptr = m - 1, ws = DequeModule.Deque<Int>()
        for i in stride(from: mid-1, through: 0, by: -1) {
            while (ptr >= m - mid && workers[ptr] + strength >= tasks[i]) {
                ws.prepend(workers[ptr])
                ptr -= 1
            }
            if ws.isEmpty {
                return false
            } else if ws.last! >= tasks[i] {
                ws.removeLast()
            } else {
                if p == 0 {
                    return false
                }
                p -= 1
                ws.removeFirst()
            }
        }
        return true
    }
    
    func tests() {
        print(maxTaskAssign([3,2,1], [0,3,3], 1, 1)) // 3
        print(maxTaskAssign([5,4], [0,0,0], 1, 5)) // 2
        print(maxTaskAssign([10,15,30], [0,10,10,10,10], 3, 10)) // 2
        print(maxTaskAssign([5181,2717,7678,7730,5931,8066,2266,5873,3645,6636,3308,2848,2082,7158,5398,4030,4942,1723,6614,5165,8086,7526,9503,2051,5305,6606,7514,5078,1149,5782,4717,5969,4966,1292,4370,3863,4111,1140,2980,5295,5347,8700,2833,6750,2352,7604,6305,2697,7501,7719,7955,7901,1779,6850,6456,1040,9230,2712,8129,9875,9385,1814,8167,2960,9191,3588,7339,2255,5314,2873,3294,5375,6745,5984,9717,4983,2558,8075,7988,6490,4499,7236,2097,8097,2923,2972,8609,8993,6354,6502,3340,1666,1281,9703,8869,5274,8150,5270,3437,3171,7423,5865,1995,7002,8550,9908,7114,8777,1250,5855,3501,9316,5380,3877], [2167,4646,1582,1102,2113,1258,4341,3193,3136,4096,3311,1501,3499,1815,1282,4914,772,4785,2632,1223,3479,3010,3505,1613,4257,1192,2918,2664,4274,4036,1039,1250,4713,3443,4514,4117,3400,3825,1782,3552,2386,865,2290,3618,793,1297,908,2187,3273,4531,3859,605,4274,3951,583,1135,2802,3585,727,2359,4011,4071,2035,4775,764,4702,2050,3304,3876,3772,4946,4371,1993,4746,1124,1221,1368,831,2337,506,951,3874,3094,2744,4258,4704,3229,1015,4876,1893,3098,4464,4189,4201,3986,3673,4126,2424,4280,2780,1748,1650,1591,753,3392,2498,835,608,1746,1243,3778,1382,4207,1909,832,4501,781,1274,973,4966,1873,2512,3644,3244,1120,4979,3945,1481,2172,4410,3572,4597,3414,4306,4714,4047,3239,4557,3226,3273,4997,3374], 139, 2075)) // 77
    }
}
