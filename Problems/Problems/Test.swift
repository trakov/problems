import UIKit

struct AmazingModel: Codable {
    let title: String
    var imageURL: String
}

protocol AmazingDataServiceProtocol { // –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –ó–¥–µ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞—á–Ω–æ–µ, –Ω–æ —Å–º—ã—Å–ª —Ç–∞–∫–æ–π
//    func changeReferrer(to newReferrer: String) // —É–±—Ä–∞—Ç—å –≤ init
    func loadAmazingData(completion: @escaping (([AmazingModel]) -> Void))
}

class AmazingDataService {

    static let shared = AmazingDataService(host: "www.amazing.com")
    // —Å–∏–Ω–≥–ª—Ç–æ–Ω —á–∞—â–µ –ø–ª–æ—Ö–æ, –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á—Ç–æ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    // –∏ —ç—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–º—ã–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–∏–Ω–≥–ª—Ç–æ–Ω –∫—É–¥–∞ –ø–æ–ø–∞–ª–æ

    private let host: String
    private var referrer: String!
    private let decodeQueue: DispatchQueue = DispatchQueue(
        // –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–¥–µ—Å—å –¥–∞–Ω–Ω—ã—Ö –æ—á–µ–Ω—å –º–∞–ª–æ, –∏ –Ω–µ —Å—Ç–æ–∏—Ç –¥–µ–∫–æ–¥–∏–Ω–≥ –¥–µ–ª–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏,
        // –±–æ–ª—å—à–µ –ø–æ—Ç–µ—Ä—å –±—É–¥–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        label: "AmazingDataService.DecodeQueue",
        qos: .background,
        attributes: .concurrent
    )

    // —è –±—ã —Å—é–¥–∞ referrer –ø—Ä–æ–∫–∏–Ω—É–ª, –Ω–∞–ø–∏—Å–∞–ª –æ–± —ç—Ç–æ–º –Ω–∏–∂–µ
    // host —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç –≤ –º–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    init(host: String) {
        self.host = host
    }
}

extension AmazingDataService: AmazingDataServiceProtocol {
    func changeReferrer(to newReferrer: String) {
        Self.shared.referrer = newReferrer // self is redundant
    }

    func loadAmazingData(completion: @escaping (([AmazingModel]) -> Void)) {
        var result: [AmazingModel] = []
        let group = DispatchGroup()
        group.enter() // –∞ –≥–¥–µ group.leave() ?
        // –∫–ª–µ–ø–∞–Ω–∏–µ —É—Ä–ª–æ–≤ - –æ—Ç–¥–µ–ª—å–Ω–æ, –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        URLSession.shared.dataTask(with: URL(string: host + "/firstPartOfAmazing?referrer=(referrer)")!) { data, _, _ in
            guard let data = data else { completion([]); return }
            self.decodeQueue.async {
                let jsonDecoder = JSONDecoder()
                // –ø–æ –º–Ω–æ–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–µ—á—Ç–æ –Ω–µ —Ç–æ, –Ω–∞–¥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∞ –Ω–µ –ø–∞–¥–∞—Ç—å
                // –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–æ –ø–∞–¥–∞—Ç—å –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞
                // –µ—Å–ª–∏ —Ç–∞–∫, —Ç–æ –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AmazingModel
                let firstResult = try! jsonDecoder.decode([AmazingModel].self, from: data)
                result.append(contentsOf: firstResult)
            }
        }.resume()
        group.enter()
        URLSession.shared.dataTask(with: URL(string: host + "/secondPartOfAmazing?referrer=(referrer)")!) { data, _, _ in
            guard let data = data else { completion([]); return }
            self.decodeQueue.async {
                let jsonDecoder = JSONDecoder()
                let secondResult = try! jsonDecoder.decode([AmazingModel].self, from: data)
                result.append(contentsOf: secondResult)
            }
        }.resume()


        group.wait() // –∫–∞–∂–µ—Ç—Å—è, –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–¥–∞—Ç—å

        DispatchQueue.concurrentPerform(iterations: result.count) { index in
            var sizedModel = result[index]
            sizedModel.imageURL += "&size=300x300" // –ª–æ–≥–∏—á–Ω–µ–µ —ç—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–∞–º, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            // –∏ —Ç–æ–≥–¥–∞ - let imageURL (–≤–º–µ—Å—Ç–æ var)
            result[index] = sizedModel
        }

        completion(result)
    }
}

class AmazingCell: UITableViewCell {

    @IBOutlet var amazingImageView: UIImageView! // –≤—Å–µ –∞—É—Ç–ª–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å private

    override func layoutSubviews() {
        makeImageViewAmazing()
    }

    func configure(with model: AmazingModel) {
        // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —è—á–µ–π–∫–µ, –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        // —Ç–∞–∫–∂–µ –∑–¥–µ—Å—å –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–µ —Ç–æ–π —è—á–µ–π–∫–µ
        // —Ñ–æ—Ä—Å-–∞–Ω–≤—Ä–∞–ø –ø–ª–æ—Ö–æ. –ö–æ–≥–¥–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–æ –ª—É—á—à–µ –∫—Ä–∞—à —Ç–∏–ø–∞ fataError("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
        // –ù–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª—ç–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –µ—Å–ª–∏ —É—Ä–ª–∞ –Ω–µ—Ç, —Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
        // guard let url = URL(string: model.imageURL) else { return }
        URLSession.shared.dataTask(with: URL(string: model.imageURL)!) { data, _, _ in
            guard let unwrappedData = data else { return }
            self.textLabel?.text = model.title
            self.amazingImageView.image = UIImage(data: unwrappedData)
        }
    }

    private func makeImageViewAmazing() {
        // —É –Ω–∞—Å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —ç–∫—Å—Ç–µ–Ω—à–µ–Ω
        // —Å–¥–µ–ª–∞—Ç—å UIView –∏–∑—É–º–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —á–∞—Å—Ç–µ–Ω—å–∫–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å—Ç–µ–Ω—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ
        amazingImageView.layer.cornerRadius = amazingImageView.frame.height / 2
    }
}

class AmazingListViewController: UIViewController {

    @IBOutlet private var tableView: UITableView! // private
    private var amazingData: [AmazingModel] = [] // private

    let service: AmazingDataServiceProtocol = AmazingDataService.shared // –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—ã–Ω–æ—Å—è—Ç—Å—è –≤ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –∫–ª–∞—Å—Å–∞
    // –Ω–∞–∑–≤–∞–Ω–∏–µ service - —á–µ—Ä–µ—Å—á—É—Ä –æ–±—â–µ–µ, amazingDataService - –ø–æ–π–¥–µ—Ç
    // 1. –µ—Å–ª–∏ –µ—Å—Ç—å DI, —Ç–æ –∏–Ω–∂–µ–∫—Ç–∏—Ç—å service –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –ø—É–±–ª–∏—á–Ω–æ–µ
    // 2. –∏–Ω–∞—á–µ - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã –∑–¥–µ—Å—å –Ω–µ –±—ã–ª–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
    // 3. –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∏–ø —ç–∫—Ä–∞–Ω–∞, –≤ —Ñ–∞–±—Ä–∏–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –∏ referrer
    // –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±—ä–µ–∫—Ç –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
    
    override func viewDidLoad() {
        // –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        // —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω dataSource –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        super.viewDidLoad()
        loadData()
    }

    internal func loadData() {
//        service.changeReferrer(to: "amazing.list") // —É–±—Ä–∞—Ç—å –≤ init
        service.loadAmazingData { amazingData in // [weak self]
            self.amazingData = amazingData
            if amazingData.count == 0 {
                // –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤—ã–Ω–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≤ –∫–æ–¥–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                // private struct Texts {
                //     static let errorMessage = "amazing.data.load.error".localized
                // }
                self.showError("amazing.data.load.error".localized)
            } else {
                self.tableView.reloadData()
            }
        }
    }
}

extension AmazingListViewController: UITableViewDataSource {
// —É –Ω–∞—Å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∞–≤–∏–ª–æ - –±—å—ë–º –Ω–∞ —ç–∫—Å—Ç–µ–Ω—à–µ–Ω—ã. –î–∞, –±—ã–≤–∞–µ—Ç —á—É—Ç—å –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ (–ø—Ä—É—Ñ–æ–≤ —è –Ω–µ –≤–∏–¥–µ–ª..),
// –Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ —Ç–∞–∫–∂–µ –≤–∞–∂–Ω–∞
    func numberOfSections(in tableView: UITableView) -> Int {
        // magic number = –ø–ª–æ—Ö–æ, –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è
        // –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã.
        // –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–æ HeaderCell —Å–¥–µ–ª–∞—Ç—å —Ö–∏–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã?
        // –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å
        return 2
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return amazingData.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ reusable —è—á–µ–π–∫–∏
        if indexPath.section == 0 {
            return HeaderCell()
        } else {
            let cell = AmazingCell()
            let model = amazingData[indexPath.row]
            cell.configure(with: model)
            return cell
        }
    }
}

// MARK: - –í—Å–µ —á—Ç–æ –Ω–∏–∂–µ —ç—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ üôÉ —Ç—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–∫–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

extension AmazingListViewController {
    private func showError(_ errorMessage: String) {
        let alertController = UIAlertController(title: "Error".localized, message: errorMessage, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        self.present(alertController, animated: true, completion: nil)
    }
}

class HeaderCell: UITableViewCell { }

extension String {
    var localized: String { return self }
}
